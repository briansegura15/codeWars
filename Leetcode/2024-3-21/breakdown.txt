1. First Missing Positive
Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.

P:
R:
should return the smallest positive integer not present in the array of nums
E:
given above
P:
create a function that takes in an array of nums as a param
sort the array
initialize the smallest positive to 1
loop over the arrray
compare the current iterating num and if it is less than or equal to the smallest positive that means that the current element is present and we must increment our smallest positive of 1 by +1
the code is rerun with our smallest positive now standing at 2 and rechecked over and over until the smallest positive is not present in the array in which case it returns 
